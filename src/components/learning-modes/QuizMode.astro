---
// Quiz.astro
---

<div class="mb-24 grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
  <div class="quiz-demo order-2 lg:order-1">
    <div class="question-card">
      <p class="font-medium text-lg" id="question-text">
        Quel est le plus grand océan du monde ?
      </p>
    </div>

    <div class="answers-grid" id="answers-container">
      <button class="answer-card" data-correct="false">
        <span class="font-medium">Atlantique</span>
      </button>
      <button class="answer-card" data-correct="true">
        <span class="font-medium">Pacifique</span>
        <div class="check-icon">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
              clip-rule="evenodd"></path>
          </svg>
        </div>
      </button>
      <button class="answer-card" data-correct="false">
        <span class="font-medium">Indien</span>
      </button>
      <button class="answer-card" data-correct="false">
        <span class="font-medium">Arctique</span>
      </button>
    </div>

    <div class="feedback-message">
      <p class="incorrect-message" style="display: none;">
        Essayez encore. La bonne réponse est "Pacifique".
      </p>
    </div>

    <div class="mt-4 flex space-x-4">
      <button id="next-btn" class="next-btn" style="display: none;">
        Question suivante
      </button>
      <button id="reset-btn" class="reset-btn" style="display: none;">
        Réinitialiser
      </button>
    </div>

    <div class="quiz-progress mt-6 flex space-x-2">
      <span class="progress-dot active"></span>
      <span class="progress-dot"></span>
      <span class="progress-dot"></span>
      <span class="progress-dot"></span>
    </div>
  </div>

  <div class="order-1 lg:order-2">
    <h3 class="text-4xl font-bold font-saeada mb-6 text-gray-900">Quiz</h3>
    <p class="text-gray-700 leading-relaxed">
      Les quiz sont un excellent moyen de tester vos connaissances et de
      renforcer votre apprentissage par la pratique active.
    </p>
    <p class="text-gray-700 leading-relaxed mt-4">
      Mindlet propose des quiz interactifs à choix multiples, générés
      intelligemment à partir de vos flashcards et du contenu partagé. Notre
      système d'IA analyse vos réponses pour identifier vos points faibles et
      vous proposer des questions ciblées qui renforcent précisément les
      domaines où vous avez besoin de progresser.
    </p>
    <p class="text-emerald-600 mt-6 font-medium flex items-center">
      ← Cliquez sur une réponse pour tester
    </p>
  </div>
</div>

<script>
  // Définition des types TypeScript
  interface Answer {
    text: string;
    correct: boolean;
  }

  interface QuizQuestion {
    question: string;
    answers: Answer[];
  }

  document.addEventListener("DOMContentLoaded", () => {
    // Questions et réponses
    const quizQuestions: QuizQuestion[] = [
      {
        question: "Dans quelle ville se situe le parlement européen ?",
        answers: [
          { text: "Bruxelles", correct: false },
          { text: "Berlin", correct: false },
          { text: "Londres", correct: false },
          { text: "Strasbourg", correct: true },
        ],
      },
      {
        question: "Quel est le plus grand océan du monde ?",
        answers: [
          { text: "Atlantique", correct: false },
          { text: "Pacifique", correct: true },
          { text: "Indien", correct: false },
          { text: "Arctique", correct: false },
        ],
      },
      {
        question: "Quelle est la capitale de l'Australie ?",
        answers: [
          { text: "Sydney", correct: false },
          { text: "Melbourne", correct: false },
          { text: "Canberra", correct: true },
          { text: "Brisbane", correct: false },
        ],
      },
      {
        question: "Combien de côtés a un hexagone ?",
        answers: [
          { text: "5", correct: false },
          { text: "6", correct: true },
          { text: "7", correct: false },
          { text: "8", correct: false },
        ],
      },
    ];

    let currentQuestionIndex = 0;
    let hasAnswered = false;

    // Éléments DOM
    const questionText = document.getElementById(
      "question-text"
    ) as HTMLElement;
    const answersContainer = document.getElementById(
      "answers-container"
    ) as HTMLElement;
    const incorrectMessage = document.querySelector(
      ".incorrect-message"
    ) as HTMLElement;
    const resetBtn = document.getElementById("reset-btn") as HTMLButtonElement;
    const nextBtn = document.getElementById("next-btn") as HTMLButtonElement;
    const progressDots = document.querySelectorAll(".progress-dot");

    // Fonction pour charger une question
    function loadQuestion(questionIndex: number): void {
      const question = quizQuestions[questionIndex];
      if (questionText) {
        questionText.textContent = question.question;
      }

      // Réinitialiser l'état de réponse
      hasAnswered = false;

      // Cacher les boutons au début
      if (resetBtn) resetBtn.style.display = "none";
      if (nextBtn) nextBtn.style.display = "none";

      // Mettre à jour les réponses
      if (answersContainer) {
        answersContainer.innerHTML = "";
        question.answers.forEach((answer) => {
          const button = document.createElement("button");
          button.classList.add("answer-card");
          button.setAttribute("data-correct", answer.correct.toString());

          const span = document.createElement("span");
          span.classList.add("font-medium");
          span.textContent = answer.text;
          button.appendChild(span);

          if (answer.correct) {
            const checkIcon = document.createElement("div");
            checkIcon.classList.add("check-icon");
            checkIcon.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
            `;
            button.appendChild(checkIcon);
          }

          button.addEventListener("click", selectAnswer);
          answersContainer.appendChild(button);
        });
      }

      // Mettre à jour les indicateurs de progression
      progressDots.forEach((dot, index) => {
        dot.classList.toggle("active", index === questionIndex);
      });

      // Cacher le message d'erreur
      if (incorrectMessage) {
        incorrectMessage.style.display = "none";
      }
    }

    // Fonction pour sélectionner une réponse
    function selectAnswer(e: Event): void {
      if (hasAnswered) return; // Empêcher de répondre plusieurs fois
      hasAnswered = true;

      const target = e.target as HTMLElement;
      const selectedButton = target.closest(
        ".answer-card"
      ) as HTMLButtonElement;
      if (!selectedButton) return;

      const isCorrect = selectedButton.getAttribute("data-correct") === "true";

      // Désactiver tous les boutons de réponse
      const answerButtons = document.querySelectorAll(".answer-card");
      answerButtons.forEach((button) => {
        (button as HTMLButtonElement).disabled = true;
        button.classList.add("pointer-events-none");
      });

      if (isCorrect) {
        selectedButton.classList.add("correct");
      } else {
        selectedButton.classList.add("incorrect");

        // Montrer la bonne réponse
        const correctButton = document.querySelector(
          '.answer-card[data-correct="true"]'
        );
        if (correctButton) {
          correctButton.classList.add("correct");
        }

        // Afficher le message d'erreur
        if (incorrectMessage) {
          incorrectMessage.style.display = "block";
          incorrectMessage.textContent = `Essayez encore. La bonne réponse est "${getCorrectAnswerText()}"`;
        }
      }

      // Afficher le bouton "Question suivante" dans tous les cas
      if (nextBtn) nextBtn.style.display = "block";
      // Afficher le bouton "Réinitialiser"
      if (resetBtn) resetBtn.style.display = "block";
    }

    // Fonction pour passer à la question suivante
    function nextQuestion(): void {
      currentQuestionIndex = (currentQuestionIndex + 1) % quizQuestions.length;
      loadQuestion(currentQuestionIndex);
    }

    // Fonction pour obtenir le texte de la bonne réponse
    function getCorrectAnswerText(): string {
      const correctAnswer = quizQuestions[currentQuestionIndex].answers.find(
        (answer) => answer.correct
      );
      return correctAnswer ? correctAnswer.text : "";
    }

    // Fonction pour réinitialiser la question actuelle
    function resetQuestion(): void {
      loadQuestion(currentQuestionIndex);

      // Réactiver les boutons
      const answerButtons = document.querySelectorAll(".answer-card");
      answerButtons.forEach((button) => {
        (button as HTMLButtonElement).disabled = false;
        button.classList.remove("pointer-events-none", "correct", "incorrect");
      });

      // Cacher le message d'erreur
      if (incorrectMessage) {
        incorrectMessage.style.display = "none";
      }

      // Cacher les boutons d'action
      if (resetBtn) resetBtn.style.display = "none";
      if (nextBtn) nextBtn.style.display = "none";

      // Réinitialiser l'état de réponse
      hasAnswered = false;
    }

    // Événements des boutons
    if (resetBtn) {
      resetBtn.addEventListener("click", resetQuestion);
    }

    if (nextBtn) {
      nextBtn.addEventListener("click", nextQuestion);
    }

    // Charger la première question
    loadQuestion(currentQuestionIndex);
  });
</script>

<style is:global>
  .quiz-demo {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    width: 100%;
  }

  .question-card {
    width: 100%;
    padding: 1.5rem;
    background: white;
    border-radius: 12px;
    box-shadow:
      0 15px 35px rgba(16, 185, 129, 0.12),
      0 5px 15px rgba(16, 185, 129, 0.06);
    border: 1px solid rgba(226, 232, 240, 0.8);
    position: relative;
    overflow: hidden;
  }

  /* Liseret vert en haut de la question */
  .question-card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #10b981, #34d399);
    opacity: 0.8;
  }

  .answers-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    width: 100%;
  }

  .answer-card {
    padding: 1.5rem;
    border-radius: 12px;
    background: linear-gradient(135deg, #f8fafc 0%, #eef2ff 100%);
    border: 1px solid rgba(226, 232, 240, 0.8);
    box-shadow:
      0 10px 25px rgba(16, 185, 129, 0.08),
      0 5px 10px rgba(16, 185, 129, 0.04);
    text-align: center;
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .answer-card:hover {
    transform: translateY(-3px);
    box-shadow:
      0 15px 35px rgba(16, 185, 129, 0.15),
      0 5px 15px rgba(16, 185, 129, 0.08);
  }

  .answer-card.correct {
    background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
    border-color: #34d399;
  }

  .answer-card.incorrect {
    background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
    border-color: #f87171;
  }

  .check-icon {
    position: absolute;
    top: 10px;
    right: 10px;
    color: #059669;
    opacity: 0;
    transform: scale(0);
    transition: all 0.3s ease;
  }

  .answer-card.correct .check-icon {
    opacity: 1;
    transform: scale(1);
  }

  .feedback-message {
    margin-top: 1rem;
    text-align: center;
  }

  .incorrect-message {
    background-color: #fee2e2;
    color: #dc2626;
    font-weight: 500;
    padding: 1rem;
    border-radius: 8px;
  }

  .next-btn {
    padding: 0.75rem 1.5rem;
    background-color: #10b981;
    color: white;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
  }

  .next-btn:hover {
    background-color: #059669;
  }

  .reset-btn {
    padding: 0.75rem 1.5rem;
    background-color: #f1f5f9;
    color: #64748b;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
  }

  .reset-btn:hover {
    background-color: #e2e8f0;
  }

  /* Indicateurs de progression */
  .progress-dot {
    width: 10px;
    height: 10px;
    background-color: #e2e8f0;
    border-radius: 50%;
    display: inline-block;
    transition: all 0.3s ease;
  }

  .progress-dot.active {
    background-color: #10b981;
    transform: scale(1.2);
  }

  /* Effet de brillance au survol */
  .answer-card::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      rgba(255, 255, 255, 0.4) 0%,
      rgba(255, 255, 255, 0) 50%,
      rgba(255, 255, 255, 0) 100%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  .answer-card:hover::after {
    opacity: 1;
  }

  .pointer-events-none {
    pointer-events: none;
  }
</style>
